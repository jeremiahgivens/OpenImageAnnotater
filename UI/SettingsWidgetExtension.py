
from AutoGenerated.SettingsWidget import *
from PyQt6.QtWidgets import QFileDialog
from SupportClasses.VideoDicer import VideoDicer
import math


class SettingsWidgetExtension(Ui_SettingsWidget):
    def __init__(self, outputHandler, modelHandler, parent):
        self.videoDicer = VideoDicer()
        self.outputHandler = outputHandler
        self.modelHandler = modelHandler
        self.setupUi(parent)
        self.connectInputs()
        self.sliderValues = [0, 0, 0]

    def connectInputs(self):
        self.browseOutputPath.clicked.connect(self.browseForOutputPath)
        self.browseModelPath.clicked.connect(self.browseForDetectionModelPath)
        self.importImageFolder.clicked.connect(self.browseForFolderOfImages)
        self.importVideo.clicked.connect(self.browseForVideo)
        self.importExisting.clicked.connect(self.browseForExistingAnnotatedSet)
        self.confirmSettings.clicked.connect(self.onConfirmSettings)
        self.trainSlider.sliderMoved.connect(self.trainSliderWasSet)
        self.validSlider.sliderMoved.connect(self.validSliderWasSet)
        self.testSlider.sliderMoved.connect(self.testSliderWasSet)

    def onConfirmSettings(self):
        if self.setupOutputFolder():
            pass

    def setupOutputFolder(self) -> bool:
        success = True
        if self.outputHandler.setOutputFolderPath(self.outputPath.text()):
            self.outputHandler.setUpFolder()
        else:
            success = False

        return success


    def browseForOutputPath(self):
        fname = QFileDialog.getExistingDirectory(None, 'Select your outpur folder', '../')
        self.outputPath.setText(fname)

    def browseForDetectionModelPath(self):
        fname = QFileDialog.getOpenFileName(None, 'Select your object detection model', '../')
        self.modelPath.setText(fname[0])

    def browseForFolderOfImages(self):
        fname = QFileDialog.getExistingDirectory(None, 'Select folder of images to import', '../')
        if self.setupOutputFolder():
            self.outputHandler.importImageFolder(fname)

    def browseForVideo(self):
        fname = QFileDialog.getOpenFileName(None, 'Select video to import', '../')
        if self.setupOutputFolder():
            pass

    def browseForExistingAnnotatedSet(self):
        fname = QFileDialog.getExistingDirectory(None, 'Select existing annotation set', '../')
        if self.setupOutputFolder():
            pass

    def updateImageCounts(self, counts):
        # format is [tot, labeled, unlabeled]
        self.totImages.setText(str(counts[0]))
        self.labeledImages.setText(str(counts[1]))
        self.unlabeled.setText(str(counts[2]))

    def trainSliderWasSet(self):
        self.setTrainingSplit(0)

    def validSliderWasSet(self):
        self.setTrainingSplit(1)

    def testSliderWasSet(self):
        self.setTrainingSplit(2)

    def getSliderValues(self):
        self.sliderValues[0] = self.trainSlider.value()
        self.sliderValues[1] = self.validSlider.value()
        self.sliderValues[2] = self.testSlider.value()

    def setTrainingSplit(self, pref):
        self.getSliderValues()
        if pref == 0:
            self.sliderValues[1] = max(0, 100 - self.sliderValues[0] - self.sliderValues[2])
            self.sliderValues[2] = 100 - self.sliderValues[0] - self.sliderValues[1]
            self.setTrainSlider(True)
            self.setValidSlider()
            self.setTestSlider()
        elif pref == 1:
            self.sliderValues[2] = max(0, 100 - self.sliderValues[0] - self.sliderValues[1])
            self.sliderValues[0] = 100 - self.sliderValues[1] - self.sliderValues[2]
            self.setTrainSlider()
            self.setValidSlider(True)
            self.setTestSlider()
        elif pref == 2:
            self.sliderValues[1] = max(0, 100 - self.sliderValues[0] - self.sliderValues[2])
            self.sliderValues[0] = 100 - self.sliderValues[1] - self.sliderValues[2]
            self.setTrainSlider()
            self.setValidSlider()
            self.setTestSlider(True)


    def setTrainSlider(self, labelOnly = False):
        if not labelOnly:
            self.trainSlider.setSliderPosition(self.sliderValues[0])

        self.trainLabel.setText(str(self.sliderValues[0]) + '%')

    def setValidSlider(self, labelOnly = False):
        if not labelOnly:
            self.validSlider.setSliderPosition(self.sliderValues[1])

        self.validLabel.setText(str(self.sliderValues[1]) + '%')

    def setTestSlider(self, labelOnly = False):
        if not labelOnly:
            self.testSlider.setSliderPosition(self.sliderValues[2])

        self.testLabel.setText(str(self.sliderValues[2]) + '%')
