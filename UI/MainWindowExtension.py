# The purpose of this extension is to extend the functionality of the MainWindow class (hence the name).
# These extensions will handle receiving user input and connecting to the correct methods.

# Will normally avoid importing *, but we need access to everything within the MainWindowClass.
from AutoGenerated.MainWindow import *
from PyQt6.QtWidgets import QFileDialog

class MainWindowExtension(Ui_MainWindow):
    def __init__(self):
        pass

    def connectInputs(self):
        self.browseOutputPath.clicked.connect(self.browseForOutputPath)
        self.browseModelPath.clicked.connect(self.browseForDetectionModelPath)
        self.importImageFolder.clicked.connect(self.browseForFolderOfImages)
        self.importVideo.clicked.connect(self.browseForVideo)
        self.importExisting.clicked.connect(self.browseForExistingAnnotatedSet)

    def browseForOutputPath(self):
        fname = QFileDialog.getExistingDirectory(None, 'Select your outpur folder', '../')
        self.outputPath.setText(fname)

    def browseForDetectionModelPath(self):
        fname = QFileDialog.getOpenFileName(None, 'Select your object detection model', '../')
        self.modelPath.setText(fname[0])

    def browseForFolderOfImages(self):
        fname = QFileDialog.getExistingDirectory(None, 'Select folder of images to import', '../')
        # Add methods for importing folder here.

    def browseForVideo(self):
        fname = QFileDialog.getOpenFileName(None, 'Select video to import', '../')
        # Add methods for importing folder here.

    def browseForExistingAnnotatedSet(self):
        fname = QFileDialog.getExistingDirectory(None, 'Select existing annotation set', '../')
        # Add code for importing existing labeled data.

    def goToNextImage(self):
        pass

    def goToPreviousImage(self):
        pass

    def setDeleteMode(self):
        pass

    def setEditMode(self):
        pass

    def setAnnotateMode(self):
        pass

